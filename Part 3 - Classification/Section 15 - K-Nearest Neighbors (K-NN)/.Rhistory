2+2+2
clear
clearPushBack()
close()
getwd()
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessing
')
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessing
')
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessin')
setwd('L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessin')
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set [, 1:2]= scale(test_set[, 1:2])
# Fitting the Regression Model to the dataset
# Create your regressor here
#prediciting test result
#predicting and converting to 1 & 0
library(class)
y_pred=knn(train = training_set[,-3],
test = test_set[,-3],
cl = training_set[,3],
k=5)
#confusion matrix
cm=table(test_set[,3],y_pred)
#accuracy=((cm[1][1]+cm[2][2])/((cm[1][1]+cm[2][2])+(cm[1][2]+cm[2][1])))*100
#visulaisation
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.05)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.05)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k=5)
plot(set[, -3],
main = 'KNN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set [, 1:2]= scale(test_set[, 1:2])
# Fitting the Regression Model to the dataset
# Create your regressor here
#prediciting test result
#predicting and converting to 1 & 0
library(class)
y_pred=knn(train = training_set[,-3],
test = test_set[,-3],
cl = training_set[,3],
k=5)
#confusion matrix
cm=table(test_set[,3],y_pred)
#accuracy=((cm[1][1]+cm[2][2])/((cm[1][1]+cm[2][2])+(cm[1][2]+cm[2][1])))*100
#visulaisation
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.02)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.02)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k=5)
plot(set[, -3],
main = 'KNN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set [, 1:2]= scale(test_set[, 1:2])
# Fitting the Regression Model to the dataset
# Create your regressor here
#prediciting test result
#predicting and converting to 1 & 0
library(class)
y_pred=knn(train = training_set[,-3],
test = test_set[,-3],
cl = training_set[,3],
k=5)
#confusion matrix
cm=table(test_set[,3],y_pred)
#accuracy=((cm[1][1]+cm[2][2])/((cm[1][1]+cm[2][2])+(cm[1][2]+cm[2][1])))*100
#visulaisation
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k=5)
plot(set[, -3],
main = 'KNN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
