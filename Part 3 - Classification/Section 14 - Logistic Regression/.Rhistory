2+2+2
clear
clearPushBack()
close()
getwd()
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessing
')
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessing
')
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessin')
setwd('L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessin')
dataset = read.csv('Social_Network_Ads.csv')
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression")
dataset = read.csv('Social_Network_Ads.csv')
View(dataset)
dataset = dataset[3:5]
View(dataset)
library(caTools)
#set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Encoding the features as factors
dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
library(caTools)
#set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
split = sample.split(dataset$Salary, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Regression Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set = scale(training_set)
test_set = scale(test_set)
classifier=glm(formula = Purchased ~ .,
family = 'binomial',
data = training_set)
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
dataset
dataset
training_set
training_set = scale(training_set)
test_set = scale(test_set[-3])
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
training_set = scale(training_set)
test_set = scale(test_set[2:3])
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Regression Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set[2:3])
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Regression Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set[,2:3])
test_set = scale(test_set[,2:3])
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Regression Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set[,2:3])
test_set = scale(test_set[,2:3])
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
training_set[,1:2] = scale(training_set[,1:2])
test_set [,1:2]= scale(test_set[,1:2])
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Regression Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set [, 1:2]= scale(test_set[, 1:2])
# Regression Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set [, 1:2]= scale(test_set[, 1:2])
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prob_pred=predict(classifier,
type = response,
newdata = test_set)
prob_pred=predict(classifier,
type = 'response',
newdata = test_set)
prob_pred=predict(classifier, type = 'response', newdata = test_set)
# Regression Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
#Encoding the features as factors
#dataset$Purchased=factor(dataset$Purchased,levels = c(0,1))
# install.packages('caTools')
library(caTools)
#set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = .75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set [, 1:2]= scale(test_set[, 1:2])
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier=glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prob_pred=predict(classifier, type = 'response', newdata = test_set[-3])
cm=table(test_set[,3],prob_pred)
cm
y_pred=ifelse(prob_pred > 0.5, 1 ,0)
cm=table(test_set[,3],y_pred)
cm
accuracy=((cm[1][1]+cm[2][2])/((cm[1][1]+cm[2][2])+(cm[1][2]+cm[2][1])))*100
aaccuracy
accuracy
cm[1][2]
cm[1]
cm[0]
cm[2]
cm[2][1]
cm[1][2]
cm[1][0]
cm
cm[2][2]
cm[0][0]
cm[1][1]
cm[1][2]
cm[2][1]
cm[3][1]
cm[2][0]
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
install.packages('ElemStatLearn')
install.packages("C:/Users/Shazad/Downloads/Compressed/ElemStatLearn_2015.6.26.tar.gz", repos = NULL, type = "source")
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
