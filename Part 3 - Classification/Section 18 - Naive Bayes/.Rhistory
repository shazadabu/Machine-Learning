2+2+2
clear
clearPushBack()
close()
getwd()
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessing
')
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessing
')
setwd('L:\Courses\Machine leaning A-Z\Machine Learning A-Z Template Folder\Part 1 - Data Preprocessin')
setwd('L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessin')
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 18 - Naive Bayes")
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 18 - Naive Bayes")
# Classification template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 18 - Naive Bayes")
# Classification template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier=naiveBayes(x=training_set[-3],
y=training_set[3])
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
setwd("L:/Courses/Machine leaning A-Z/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 18 - Naive Bayes")
# Classification template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
# Fitting classifier to the Training set
# Create your classifier here
classifier=naiveBayes(x=training_set[-3],
y=training_set$Purchased)
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
classifier=naiveBayes(x=training_set[-3],
y=dataset$Purchased)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
View(dataset)
View(dataset)
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(training_set)
View(training_set)
View(training_set)
library(e1071)
classifier=naiveBayes(x=training_set[-3],
y=dataset$Purchased)
classifier=naiveBayes(x=training_set[-3],
y=training_set$Purchased)
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Naive bayes Classifier (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
